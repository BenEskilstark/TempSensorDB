// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TempSensorDB.Models;

#nullable disable

namespace TempSensorDB.Migrations
{
    [DbContext(typeof(SqliteDbContext))]
    partial class SqliteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("TempSensorDB.Models.Farm", b =>
                {
                    b.Property<int>("FarmID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FarmID");

                    b.ToTable("Farms");
                });

            modelBuilder.Entity("TempSensorDB.Models.Reading", b =>
                {
                    b.Property<int>("ReadingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Humidity")
                        .HasColumnType("REAL");

                    b.Property<int>("SensorID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TempF")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("ReadingID");

                    b.HasIndex("SensorID");

                    b.ToTable("Readings");
                });

            modelBuilder.Entity("TempSensorDB.Models.Sensor", b =>
                {
                    b.Property<int>("SensorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("CalibrationValueF")
                        .HasColumnType("REAL");

                    b.Property<int>("FarmID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastHeartbeat")
                        .HasColumnType("TEXT");

                    b.Property<double?>("LastTempF")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("LastTimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<double?>("MaxTempF")
                        .HasColumnType("REAL");

                    b.Property<double?>("MinTempF")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SensorID");

                    b.HasIndex("FarmID");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("TempSensorDB.Models.Reading", b =>
                {
                    b.HasOne("TempSensorDB.Models.Sensor", "Sensor")
                        .WithMany("Readings")
                        .HasForeignKey("SensorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("TempSensorDB.Models.Sensor", b =>
                {
                    b.HasOne("TempSensorDB.Models.Farm", "Farm")
                        .WithMany("Sensors")
                        .HasForeignKey("FarmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("TempSensorDB.Models.Farm", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("TempSensorDB.Models.Sensor", b =>
                {
                    b.Navigation("Readings");
                });
#pragma warning restore 612, 618
        }
    }
}
