// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TempSensorDB.Models;

#nullable disable

namespace TempSensorDB.Models.Migrations
{
    [DbContext(typeof(TempSensorDbContext))]
    partial class TempSensorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TempSensorDB.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"));

                    b.Property<double?>("MaxTempF")
                        .HasColumnType("float");

                    b.Property<double?>("MinTempF")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("TempSensorDB.Models.Sensor", b =>
                {
                    b.Property<int>("SensorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SensorID"));

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SensorID");

                    b.HasIndex("LocationID");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("TempSensorDB.Models.TempReading", b =>
                {
                    b.Property<int>("TempReadingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TempReadingID"));

                    b.Property<int>("SensorID")
                        .HasColumnType("int");

                    b.Property<double>("TempF")
                        .HasColumnType("float");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("TempReadingID");

                    b.HasIndex("SensorID");

                    b.ToTable("TempReadings");
                });

            modelBuilder.Entity("TempSensorDB.Models.TempSummary", b =>
                {
                    b.Property<int>("TempSummaryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TempSummaryID"));

                    b.Property<int>("SensorID")
                        .HasColumnType("int");

                    b.Property<double>("TempF")
                        .HasColumnType("float");

                    b.Property<string>("TimeCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("TempSummaryID");

                    b.HasIndex("SensorID");

                    b.ToTable("TempSummary");
                });

            modelBuilder.Entity("TempSensorDB.Models.Sensor", b =>
                {
                    b.HasOne("TempSensorDB.Models.Location", "Location")
                        .WithMany("Sensors")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TempSensorDB.Models.TempReading", b =>
                {
                    b.HasOne("TempSensorDB.Models.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("TempSensorDB.Models.TempSummary", b =>
                {
                    b.HasOne("TempSensorDB.Models.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("TempSensorDB.Models.Location", b =>
                {
                    b.Navigation("Sensors");
                });
#pragma warning restore 612, 618
        }
    }
}
